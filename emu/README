
Requires Mercury+Thallium+MPI+HDF5+HDF5_VOL_ASYNC+boost

First version of streamIO with HDF5. Multi-threaded streaming threads with IO thread. HDFIO performed by IOthread in background. Reads and writes are interleaved. 

Event generator creates events at rates specified by the user. Events are buffered, sorted and stored in NVRAMs. NVRAM data are written to file blocks. HDF5 metadata contains b-tree for file blocks. 
Files and buffers can be probed for most recent events by submitting queries. Queries have higher priority over file block writes. 
All IO are parallel IO performed by MPIO collectives using HDF5 metadata for lookups.

Consistency of queried data is guaranteed by HDF5, IO thread priorities, and locks. The NVRAM view returned by probes is a global view of data sorted across multiple NVRAM files. HDF5 view returned by queries is sorted data across multiple disk blocks. Data in memory buffers is not globally sorted. 

Can be used for writing data in sorted order in disks. Multiple files can be handled in parallel by the IO layer. 
Can be used for probing/querying data stored in files and in the buffers. Guarantees data consistency between reads and on-going writes. 
Can be used for sorting large volumes of stream data, using memory and NVRAMs as intermediate buffers.
Sorted data is located using lookup tables that maintain minimum and maximum values of keys in data blocks. 
Block offsets are provided to HDF5 which contains internal B-trees that convert file offsets to disk offsets.
Queried data block is located in the B-tree at most log(N/B) time, where N is the number of key-value pairs and B is the HDF5 chunk size. 
Once the chunk is found in the B-tree, data is fetched in constant number of disk operations.

Author
Aparna Sasidharan
